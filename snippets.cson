# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'.source.php':
    # PHP7 function with scalar typehints.
    'function':
        'prefix': 'fn'
        'body': """
        /**
         * ${1:description}
         */
        ${2:public} function ${3:function_name}(${4}) ${5: \: ${6:array}}
        {
            $0
        }
        """

    # Laravel-esque comment block.
    'pretty comment':
        'prefix': 'pc'
        'body': """
        /*
         |----------------------------------------------------------------------
         | ${1:header}
         |----------------------------------------------------------------------
         |
         | ${2:description}
         |
         */
         """

    # Laravel Specific
    'has many':
        'prefix': 'lhm'
        'body': """
        public function ${1:function_name}() : HasMany
        {
            return $this->hasMany(${2:has_many}::class$0);
        }
        """

    'belongs to':
        'prefix': 'lbt'
        'body': """
        public function ${1:function_name}() : BelongsTo
        {
            return $this->belongsTo(${2:has_many}::class$0);
        }
        """

    'has one':
        'prefix': 'lho'
        'body': """
        public function ${1:function_name}() : BelongsTo
        {
            return $this->hasOne(${2:has_many}::class$0);
        }
        """

    'belongs to many':
        'prefix': 'lbtm'
        'body': """
        public function ${1:function_name}() : BelongsTo
        {
            return $this->belongsToMany(${2:has_many}::class$0);
        }
        """
