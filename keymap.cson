# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'body':
    'ctrl-e': 'tree-view:toggle'
    'ctrl-p': 'fuzzy-finder:toggle-file-finder'
    'ctrl-w j': 'window:focus-pane-below'
    'ctrl-w k': 'window:focus-pane-above'
    'ctrl-w h': 'window:focus-pane-on-left'
    'ctrl-w l': 'window:focus-pane-on-right'

'atom-text-editor':
    'cmd-n': 'advanced-open-file:toggle'

'atom-text-editor.vim-mode:not(.insert-mode)':
    'ctrl-e': 'native!'
    'ctrl-e': 'tree-view:toggle'
    ';': 'ex-mode:open'

'atom-text-editor.vim-mode':
    'ctrl-e': 'tree-view:toggle'
    'ctrl-w |': 'pane:split-right-and-copy-active-item'
    'ctrl-w -': 'pane:split-down-and-copy-active-item'

'atom-text-editor.vim-mode.insert-mode':
    '0 -': 'editor:insert-thin-arrow'
    '- =': 'editor:insert-fat-arrow'
